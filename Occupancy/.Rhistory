collars$GMU[is.na(collars$GMU)] <- "Montana"
collars$zone <- as.character(collars$zone)
collars$zone[collars$GMU == "Montana"] <- "Montana"
# Make GMT POSIXct
collars$GMT <- as.POSIXct(collars$GMT, tz = "GMT")
# Okay, let's explore.
length(unique(collars$serial[collars$zone == "Beaverhead"]))
length(unique(collars$serial[collars$GMU == "30"]))
# Which animals are in GMU 30 during winter and summer?
winter30 <- collars[which(collars$GMU == "30" & collars$GMT < as.POSIXct("2015-04-01 00:00:00", tz = "GMT")), ]
summer30 <- collars[which(collars$GMU == "30" & collars$GMT >= as.POSIXct("2015-04-01 00:00:00", tz = "GMT")), ]
# List the animals that wintered in GMU 30
win30vec <- unique(winter30$serial)
# Look at all the points for the collars that wintered in GMU 30
win30 <- collars[collars$serial %in% win30vec, ]
# Where did the win30 collars go for summer?
w <- win30[win30$GMT < as.POSIXct("2015-03-20 00:00:00"), ]
inbtw <- win30[win30$GMT > as.POSIXct("2015-03-20 00:00:00") & win30$GMT < as.POSIXct("2015-05-15 00:00:00"), ]
s <- win30[win30$GMT > as.POSIXct("2015-05-15 00:00:00"), ]
###################
# Let's make a map
###################
# Load GMU and Zone polygon shapefiles
gmus <- readOGR("GIS Layers/IDFG Game Management Units", "GameManagementUnits")
zones <- readOGR("GIS Layers/IDFG Elk Management Zones", "ElkManagementZones")
# Make a shape for GMU 30
gmu30 <- gmus[gmus$NAME == "30", ]
# Make map of seasonal ranges for elk that winter  in GMU 30
plot(w, col = "blue", pch = 16)
plot(inbtw, add = T, col = "pink", pch = 16)
plot(s, add = T, col = "red", pch = 16)
plot(gmus, xlim = c(2500000, 2600000), ylim = c(1480000, 1580000), border = "gray", add = T)
plot(zones, add = T)
title(main = "Elk that winter in GMU 30")
centroids <- gCentroid(gmus, byid = T)
text(x = coordinates(centroids)[,1], y = coordinates(centroids)[,2], labels = gmus$NAME)
legend("bottomleft",
legend = c("Winter Locations", "Intermediate Locations", "Summer Locations"),
fill = c("blue", "pink", "red"),
cex = .8)
#####################################
# Drawing polygon around winter range
#####################################
# Make a sp data frame with only one column, and give every animal the same serial number
w2 <- w[, 1]
w2$serial <- 1
lot(ver, add = T)
# Draw 2km buffer around winter range points
buff <- gBuffer(w2,
byid = F,
width = 2000,
joinStyle = "ROUND")
######################
# Rasterize everything
######################
# Bring in GAP raster, crop to extent of GMU 30
gap <- raster("GIS Layers/GAP.Idaho/gaplc_IDTM")
gap2 <- crop(gap, extent(gmu30))
# Move from attribute table to simple values, use VALUE_1
gap3 <- deratify(gap2, att = "VALUE_1", complete = T)
# Get the values for human developed and agricultural areas
human_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("human", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
ag_vals <- gap@data@attributes[[1]]$VALUE_1[grepl("agricul", gap@data@attributes[[1]]$NVC_CLASS, ignore.case = T)]
bad_vals <- c(as.character(human_vals), as.character(ag_vals))
# Make GAP a raster of good and bad sampling areas
gap3[gap3 %in% bad_vals] <- 0
gap3[gap3 != 0] <- 1
# Extract to find which cells are in GMU 30
gap4 <- extract(gap3, gmu30, cellnumbers = T)
gap4.1 <- gap4[[1]][gap4[[1]][, 2] == 1, ]
l <- gap4.1[, 1]
# Make cells in GMU 30 = 1, 0 otherwise
gap30 <- gap3
gap30[l] <- 6
gap30[gap30 != 6] <- 0
gap30[l] <- 1
# Extract to find which cells are in winter buffer
gap5 <- extract(gap30, buff, cellnumbers = T)
gap5.1 <- gap5[[1]][gap5[[1]][, 2] == 1, ]
l <- gap5.1[, 1]
# Make cells in winter buffer = 1, 0 otherwise
gap_win <- gap30
gap_win[l] <- 6
gap_win[gap_win != 6] <- 0
gap_win[l] <- 1
# then aggregate to 1500m cells
fish <- aggregate(gap_win, 50, fun = mean)
# Select grid cells where 70% of smaller grid cells meet the criteria (not in ag, in GMU 30, in winter buff)
fish2 <- fish
fish2[fish2 >= 0.7] <- 1
fish2[fish2 < 0.7] <- 0
# make raster into spatial polygons, give each cell a unique ID
fishpoly <- rasterToPolygons(fish2, fun = function(x){x == 1})
fishpoly$ID <- seq(1:length(fishpoly$gaplc_IDTM))
# run grts on grid, sample 10, oversample 10
design <- list(None = list(panel = c(Panel = 10), seltype = "Equal", over = 10))
sites <- grts(design = design,
DesignID = "EQUAL",
type.frame = "area",
src.frame = "sp.object",
sp.object = fishpoly,
shapefile = F)
#              shapefile = T,
#              prjfilename = "GIS Layers/IDFG Game Management Units/GameManagementUnits",
#              out.shape = "Camera Trap Study/Maps/grts_sample")
# Plot it
plot(fish2)
plot(fishpoly, add = T, border = "black")
plot(gmu30, add = T, border = "red")
color <- rep("xx", nrow(sites@data))
color[sites@data$panel == "Panel"] <- "yellow"
color[sites@data$panel == "OverSamp"] <- "light blue"
points(sites, col = color)
sites
str(sites)
summary(sites)
sites@data
str(sites)
?load
load("GitHub/Camera-trap-study/2015 data/access.sum.RData")
head(access.sum)
access <- access.sum
# Load packages
library(raster)
library(rgdal)
# Set working directory
setwd("C:/Users/anna.moeller/Documents")
# Load GMU and Zone polygon shapefiles
gmus <- readOGR("GIS Layers/IDFG Game Management Units", "GameManagementUnits")
zones <- readOGR("GIS Layers/IDFG Elk Management Zones", "ElkManagementZones")
# Bring in sampling area shapefiles
samp30 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Beaverhead Sampling Area 2015-16")
select30 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Beaverhead Selected Plots 2015-16")
thirds30 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Beaverhead Selected Plots Thirds 2015-16")
samp6 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Panhandle Sampling Area 2015-16")
select6 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Panhandle Selected Plots 2015-16")
thirds6 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Panhandle Selected Plots Thirds 2015-16")
# Thirds30 lost part of its projection along the way.
projection(thirds30) <- "+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
projection(samp30) <- "+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
projection(select30) <- "+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
# Bring in camera locations
cams <- read.csv("Camera Trap Study/Cameras/GPS GIS files/Deployed Cameras 2015-16.csv")
cams <- SpatialPointsDataFrame(coords = cbind(cams$lon, cams$lat), data = cams,
proj4string = CRS("+init=epsg:4326"))
cams <- spTransform(cams, CRS("+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0"))
#########################################################################
load("GitHub/Camera-trap-study/Covariates/dem.RData")
load("GitHub/Camera-trap-study/Covariates/slope.RData")
load("GitHub/Camera-trap-study/Covariates/asp.RData")
##########################################################################
load("GitHub/Camera-trap-study/Covariates/SWErasterstack.RData")
load("GitHub/Camera-trap-study/Covariates/SDrasterstack.RData")
# Load packages
library(dplyr)
# Bring in the Access database
access <- read.table("C:/Users/anna.moeller/Documents/Camera Trap Study/Cameras/Important Info 2015-16.txt", header = T, sep = ",",  as.is = T)
access <- rename(access,
deploy = Deployment.Date,
takedown = TakeDownDate,
camID = Camera.ID,
battcheck = Battery.Check.Date,
op.start = Operating.Start,
op.end = Operating.End,
plot.start = PlotStartDate,
plot.end = PlotEndDate) %>%
mutate(deploy = as.Date(deploy, format = "%m/%d/%Y %H:%M:%S"),
takedown = as.Date(takedown, format = "%m/%d/%Y %H:%M:%S"),
battcheck = as.Date(battcheck, format = "%m/%d/%Y %H:%M:%S"),
op.start = as.Date(op.start, format = "%m/%d/%Y %H:%M:%S"),
op.end = as.Date(op.end, format = "%m/%d/%Y %H:%M:%S"),
plot.start = as.Date(plot.start, format = "%m/%d/%Y %H:%M:%S"),
plot.end = as.Date(plot.end, format = "%m/%d/%Y %H:%M:%S"))
# Added two nonexistent cameras to BH03, SJ09 (AM999, AM888) in Access db
names(access)
access.sum <- group_by(access, camID) %>%
summarise(camnum = min(Camnum),
easting = min(Easting),
northing = min(Northing),
op.start = min(op.start),
op.end = max(op.end),
plot.start = min(plot.start),
plot.end = max(plot.end),
plot = min(PlotNum),
model = min(Camera.Model))
save(access.sum, file = "C:/Users/anna.moeller/Documents/GitHub/Camera-trap-study/2015 data/access.sum.RData")
access <- access.sum
head(access)
table(access$model)
37+9+37+80
9*9*2
access[access$model == "",]
table(access$camnum)
# Bring in the Access database
access <- read.table("C:/Users/anna.moeller/Documents/Camera Trap Study/Cameras/Important Info 2015-16.txt", header = T, sep = ",",  as.is = T)
access <- rename(access,
deploy = Deployment.Date,
takedown = TakeDownDate,
camID = Camera.ID,
battcheck = Battery.Check.Date,
op.start = Operating.Start,
op.end = Operating.End,
plot.start = PlotStartDate,
plot.end = PlotEndDate) %>%
mutate(deploy = as.Date(deploy, format = "%m/%d/%Y %H:%M:%S"),
takedown = as.Date(takedown, format = "%m/%d/%Y %H:%M:%S"),
battcheck = as.Date(battcheck, format = "%m/%d/%Y %H:%M:%S"),
op.start = as.Date(op.start, format = "%m/%d/%Y %H:%M:%S"),
op.end = as.Date(op.end, format = "%m/%d/%Y %H:%M:%S"),
plot.start = as.Date(plot.start, format = "%m/%d/%Y %H:%M:%S"),
plot.end = as.Date(plot.end, format = "%m/%d/%Y %H:%M:%S"))
# Added two nonexistent cameras to BH03, SJ09 (AM999, AM888) in Access db
# That is a long db. If we don't need that info, use summary:
access.sum <- group_by(access, camID) %>%
summarise(camnum = min(Camnum),
easting = min(Easting),
northing = min(Northing),
op.start = min(op.start),
op.end = max(op.end),
plot.start = min(plot.start),
plot.end = max(plot.end),
plot = min(PlotNum),
model = min(Camera.Model)) %>%
mutate(model = replace(model, model == "", NA))
table(access$model)
head(access.sum)
table(access.sum$model)
access[is.na(access.sum$model),]
access.sum[is.na(access.sum$model),]
save(access.sum, file = "C:/Users/anna.moeller/Documents/GitHub/Camera-trap-study/2015 data/access.sum.RData")
access <- access.sum
# Bring in sampling area shapefiles
select30 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Beaverhead Selected Plots 2015-16")
select6 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Panhandle Selected Plots 2015-16")
# Unit 30 lost its projection somewhere along the way
projection(select30) <- "+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
# Bring in camera locations
cams <- read.csv("Camera Trap Study/Cameras/GPS GIS files/Deployed Cameras 2015-16.csv")
cams <- SpatialPointsDataFrame(coords = cbind(cams$lon, cams$lat), data = cams,
proj4string = CRS("+init=epsg:4326"))
cams <- spTransform(cams, CRS("+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0"))
plot(select30)
plot(cams, add = T)
plot(select6)
plot(cams, add = T)
class(select6)
tst <- rbind(select6, select30)
?spRbind
library(sp)
?spRbind
??spRbind
library(maptools) # for spRbind
?spRbind
tst <- spRbind(select6, select30)
#
## Not run:
require(maptools)
xx <- readShapePoly(system.file("shapes/sids.shp", package="maptools")[1],
IDvar="FIPSNO", proj4string=CRS("+proj=longlat +ellps=clrk66"))
xx
head(xx)
head(select30)
row.names(select6)
row.names(as(select6, "data.frame"))
head(select6)
tail(select6)
tst6 <- spChFIDs(select6, as.character(select6$plot))
tst6
head(tst6)
tst30 <- spChFIDs(select30, as.character(select30$plot))
head(tst30)
tst <- spRbind(tst6, tst30)
tst <- rbind(tst6, tst30)
row.names(as(tst6, "data.frame"))
?clabs
names(tst6)
names(tst30)
head(tst30)
tst30$gaplc_IDTM <- NULL
head(tst30)
tst <- spRbind(tst6, tst30)
ncol(tst6)
ncol(tst30)
head(tst6)
head(tst30)
tst6$layer <- NULL
tst <- spRbind(tst6, tst30)
head(tst)
tail(tst)
plot(tst)
plots <- spRbind(tst6, tst30)
plot(plots[grepl("BH", plots$plot),]
)
plot(plots[grepl("SJ", plots$plot),])
plots(plots)
plot(plots)
plot(cams, add = T)
plot(sample30)
plot(select30)
plot(dem, add = T)
plot(select30, add = T)
res(dem)
res(select30)
extract(dem, plots, fun = mean, na.rm = T)
head(plots)
# Extract mean slope to each plot
plots$dem <- extract(dem, plots, fun = mean, na.rm = T)
plots$slope <- extract(slope, plots, fun = mean, na.rm = T)
plots$asp <- extract(asp, plots, fun = mean, na.rm = T)
plot(slope, add = T)
load("GitHub/Camera-trap-study/Covariates/slope.RData")
plot(slope, add = T)
head(slope)
load("GitHub/Camera-trap-study/Covariates/slope.RData")
slope
head(slope)
plot(slope)
dem
# Load packages
library(dplyr)
library(lubridate)
library(stringr)
library(rwrfhydro) # For SNODAS functions
library(MODISTools) # For downloading NDVI
library(rgdal) # readOGR, spTransform
library(sp) # for SpatialPolygons, GridTopology, spTransform
library(rgeos) # for gIntersection, gBuffer, etc. functions
library(maptools) # for unionSpatialPolygons (dissolve function)
library(raster)
library(rts) # For raster time series
library(gdalUtils) # For projecting and cropping raster
# Set working directory
setwd("C:/Users/anna.moeller/Documents")
# Load GMU and Zone polygon shapefiles
gmus <- readOGR("GIS Layers/IDFG Game Management Units", "GameManagementUnits")
zones <- readOGR("GIS Layers/IDFG Elk Management Zones", "ElkManagementZones")
# Make a shape for GMU 30 and 6
gmu30 <- gmus[gmus$NAME == "30", ]
gmu6 <- gmus[gmus$NAME == "6", ]
gmus <- gmus[gmus$NAME == "6"|gmus$NAME == "30", ]
zones <- zones[zones$NAME == "Panhandle"|zones$NAME == "Beaverhead", ]
# Bring in sampling area shapefiles
samp30 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Beaverhead Sampling Area 2015-16")
select30 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Beaverhead Selected Plots 2015-16")
thirds30 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Beaverhead Selected Plots Thirds 2015-16")
samp6 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Panhandle Sampling Area 2015-16")
select6 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Panhandle Selected Plots 2015-16")
thirds6 <- readOGR("Camera Trap Study/Cameras/GPS GIS files/Sampling areas and plots",
"Panhandle Selected Plots Thirds 2015-16")
# Thirds30 lost part of its projection along the way.
projection(thirds30) <- "+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
projection(samp30) <- "+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
projection(select30) <- "+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +datum=NAD83 +units=m +no_defs +ellps=GRS80 +towgs84=0,0,0"
# Elevation
# Bring in DEM (30x30) raster from Josh
dem <- raster("GIS Layers/1.GIS layers from Josh/dem")
# Slope
slope <- terrain(dem, opt = "slope") # terrain() is a function in raster
# Aspect
asp <- terrain(dem, opt = "aspect")
slope
plot(slope)
plot(slope, add = T)
writeOGR(slope, "Camera Trap Study/GIS Layers/Slope", "slope", driver = "ESRI Shapefile")
slope
?writeRaster
writeRaster(slope, "Camera Trap Study/GIS Layers/Slope/slope", format = "GTiff")
?expand.path
?path.expand
path.expand("Camera Trap Study/GIS Layers/Slope/slope")
path.expand("~/Camera Trap Study/GIS Layers/Slope/slope")
writeRaster(slope, path.expand("~/Camera Trap Study/GIS Layers/Slope/slope"), format = "GTiff")
writeRaster(slope, path.expand("~/GIS Layers/Slope/slope"), format = "GTiff")
tst <- raster("GIS Layers/Slope/slope")
tst <- raster("GIS Layers/Slope/slope.tif")
tst
plot(tst)
writeRaster(asp, path.expand("~/GIS Layers/Aspect/aspect"), format = "GTiff")
# Bring in slope, aspect, elevation (30x30)
elev <- raster("GIS Layers/1.GIS layers from Josh/dem")
slope <- raster("GIS Layers/Slope/slope.tif")
asp <- raster("GIS Layers/Aspect/aspect.tif")
elev
slope
asp
head(plots)
plots$slope <- extract(slope, plots, fun = mean, na.rm = T)
plots$asp <- extract(asp, plots, fun = mean, na.rm = T)
head(plots)
head(access)
head(cams)
length(cams)
length(access)
dim(access)
dim(cams)
?extract
cams$elev <- extract(elev, cams)
head(cams)
cams <- rename(cams, ele_gps = ele)
cams <- read.csv("Camera Trap Study/Cameras/GPS GIS files/Deployed Cameras 2015-16.csv")
cams <- rename(cams, ele_gps = ele)
cams
head(cams)
cams <- SpatialPointsDataFrame(coords = cbind(cams$lon, cams$lat), data = cams,
proj4string = CRS("+init=epsg:4326"))
cams <- spTransform(cams, CRS("+proj=tmerc +lat_0=42 +lon_0=-114 +k=0.9996 +x_0=2500000 +y_0=1200000 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0"))
# Bring in camera info
load("GitHub/Camera-trap-study/2015 data/access.sum.RData")
access <- access.sum
# Compare DEM and GPS elevation
cams$elev <- extract(elev, cams)
head(cams)
head(access)
head(as(cams, "data.frame"))
head(as.data.frame(cams))
head(access)
out <- left_join(access, as.data.frame(cams), by = c("camID" = "name"))
class(cams$name)
tmp <- as.data.frame(cams) %>%
mutate(cam = as.character(name))
head(tmp)
tmp <- as.data.frame(cams) %>%
mutate(name = as.character(name))
tmp <- as.data.frame(cams) %>%
)
head(tmp)
# Stick the info together
tmp <- as.data.frame(cams) %>%
mutate(name = as.character(name)) %>%
left_join(access, ., by = c("camID" = "name"))
head(tmp_)
head(tmp)
# Stick the info together
out <- as.data.frame(cams) %>%
mutate(name = as.character(name)) %>%
left_join(access, ., by = c("camID" = "name"))
dim(out)
out[is.na(out$model),]
head(cam)
head(cams)
# Stick the info together
out <- as.data.frame(cams) %>%
mutate(name = as.character(name)) %>%
rename(lat_gps = lat,
long_gps = lon) %>%
left_join(access, ., by = c("camID" = "name"))
head(out)
head(out$PlotNum)
# Stick the info together
out <- as.data.frame(cams) %>%
mutate(name = as.character(name)) %>%
rename(lat_gps = lat,
long_gps = lon) %>%
left_join(access, ., by = c("camID" = "name")) %>%
select(-PlotNum)
out
# Load packages
library(tidyr)
library(plyr)
library(dplyr)
# Load pictures and access database
load("C:/Users/anna.moeller/Documents/GitHub/Camera-trap-study/2015 data/pics.wide20160606.RData")
load("C:/Users/anna.moeller/Documents/GitHub/Camera-trap-study/2015 data/access.sum.RData")
# Make a dataframe for camera number 1-9
camnum <- select(access.sum, camID, plot, camnum) %>%
# Drop AM157 because there were two cameras in this cell and the card got lost
filter(camnum != 0)
# Create an effort encounter history by week
# Start by making an eh by day
source("C:/Users/anna.moeller/Documents/GitHub/Camera-trap-study/Image Analysis/eh_fn.R")
cam.eh <- eh_fn(pics, access.sum, starthour = "12:00:00", endhour = "12:00:00",
by_t = "day", animal.eh = F)
# Look at the week I'm using and if at least 4 of the days are open, call it open
effort <- filter(cam.eh, ideal.date >= as.Date("2016-02-01") &
ideal.date <= as.Date("2016-02-08")) %>%
group_by(cam) %>%
summarise(test = length(which(open == T))) %>%
mutate(open = ifelse(test >= 4, T, F)) %>%
select(-test)
source("Occupancy encounter history.R")
setwd("C:/Users/anna.moeller/Documents/Github/Camera-trap-study/Models/Occupancy")
source("Occupancy encounter history.R")
# Anna Moeller
# 5/25/2016
ideal_fn <- function(startend, starthour, endhour, by_t){
# Make an "ideal" dataset, all cameras all days.
ideal.ls <- list()
for(i in 1:length(startend$cam)){
# Have to specify time zone so it doesn't account for Daylight Savings Time
start <- as.POSIXct(paste(startend$plot.start[i], starthour, sep = " "), tz = "GMT")
end <- as.POSIXct(paste(startend$plot.end[i], endhour, sep = " "), tz = "GMT")
ideal.ls[[i]] <- expand.grid(
cam = startend$cam[i],
ideal = seq(start, end, by = by_t))
ideal.ls[[i]]$cam <- as.character(ideal.ls[[i]]$cam)
ideal.ls[[i]]$ideal.date <- as.Date(ideal.ls[[i]]$ideal)
}
ideal.df <- do.call(bind_rows, ideal.ls)
}
